(* Copyright 2014 Gabriele Mambrini 

 This grammar is for Grako (https://bitbucket.org/apalala/grako).

*)

configuration
    =
    rules:{rule}+ $
    ;

rule
    =
    'rule' identifier condition_list 'action' action_list 'end'
    ;

condition_list
    =
    {condition ';'} condition
    ;

condition
    =
    'match' test [ [ 'repeated' INTEGER 'times' ] 'within' time_limit ] 
    ;

time_limit 
    =
    INTEGER ( 's' | 'm' | 'h' )
    ;

test
    = 
    or_test
    ;

or_test
    =
    and_test {'or' and_test}
    ;


and_test
    =
    not_test {'and' not_test}
    ;


not_test
    =
    'not' not_test | comparison
    ;


comparison
    =
    identifier comp_op expr
    | '~'   pattern
    | '!~'  pattern
    ;

comp_op
    =
      '<'
    | '>'
    | '=='
    | '>='
    | '<='
    | '!='
    | 'in'
    | 'not' 'in'
    ;

expr 
    = 
      INTEGER
    | STRING
    | identifier
    ;

(* just for test *)

identifier 
    =
    FRAGMENT
    ;

FRAGMENT 
    = 
    ?/[a-z]+/? 
    ;

INTEGER
    =
    ?/[0-9]+/?
    ;

STRING
    =
    '"'  @:{?/[^"\n\\]/?|ESC} '"'
    |
    "'"  @:{?/[^'\n\\]/?|ESC} "'"
    ;

ESC
    =
    ?/\\['"\\nrtbfv]/?
    |
    ?/\\u[a-fA-F0-9]{4}/?
    ;